/*
Program to verify The Birthday Paradox.
Static test cases i.e. 1000
*/
#include<iostream>
#include<cstdio>
#include<stdlib.h>
using namespace std;

class Birthday
{
public:
	void accept();
	void  probability(int);
	void dynamic(int);	 
}; 

void Birthday::probability(int person)
{
	int i;
    double p = 1;

    for(i = 1; i < person; i++)
     {
         p = p*((365.0-i)/365.0);  //calculating the probability of n number of people with the probability formula.(1*(364/365)*(363*365)*.....))
     }

     cout<<"\nThe probablity for the birthday is :: %f"<<1-p;

 
}
void Birthday::dynamic(int person)
{
    int birthdays[365] = {0};  //birthdays will have 365 elements, each corresponding to 1 day. (all initialized to 0)
    double pairs;
    int i,j,k,flag;
    double count=0;

    for(j = 0; j < 1000; j++)    //here we are considering 1000 test case 
    {
        flag=0;

        for(i = 0; i < 1000; i++)
            birthdays[i] = 0;          //initializing birthdays to 0 for each test case

        for(i = 0; i < person; i++)
            birthdays[rand()%365] += 1;  //for each birth date generated by rand, (out of 365),
                                        //its corresponding element in birthdays will be incremented by 1 (birthdays array is initialized to 0).
        for(i = 0; i < 1000; i++)        //changed.
            if(birthdays[i] >= 2)       //two or more people have same birthdays
                    flag=1;             //i.e. mapped to the same element in birthdays array.

        if(flag==1)
            count++;
    }
    pairs=count/1000;
    cout<<"\nThe number of sets out of 1000 which have clashing birthdays :: %f\n"<<count;
    cout<<"\nThe probability of persons with matching(pairs) birthday out of 1000 are :: %f\n"<<pairs;


}

int main()
{
    Birthday b;
    int person;
    cout<<"Enter the number of person of whose you want to see the probability ::";
    cin>>person;

    b.probability(person); 
    b.dynamic(person);

    return 0;
}
